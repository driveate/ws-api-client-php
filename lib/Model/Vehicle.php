<?php
/**
 * Vehicle
 *
 * PHP version 5
 *
 * @category Class
 * @package  WsApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WsApiClient\Model;

use \ArrayAccess;
use \WsApiClient\ObjectSerializer;

/**
 * Vehicle Class Doc Comment
 *
 * @category Class
 * @package  WsApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Vehicle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Vehicle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'market' => '\WsApiClient\Model\Market',
        'body' => 'string',
        'trim' => 'string',
        'slug' => 'string',
        'generation' => '\WsApiClient\Model\Generation',
        'stud_holes' => 'int',
        'pcd' => 'float',
        'centre_bore' => 'float',
        'lock_type' => 'string',
        'lock_text' => 'string',
        'bolt_pattern' => 'string',
        'power' => '\WsApiClient\Model\Power',
        'engine_type' => 'string',
        'engine_code' => 'string',
        'fuel' => 'string',
        'wheels' => '\WsApiClient\Model\WheelPair[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'market' => null,
        'body' => null,
        'trim' => null,
        'slug' => null,
        'generation' => null,
        'stud_holes' => null,
        'pcd' => null,
        'centre_bore' => null,
        'lock_type' => null,
        'lock_text' => null,
        'bolt_pattern' => null,
        'power' => null,
        'engine_type' => null,
        'engine_code' => null,
        'fuel' => null,
        'wheels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'market' => 'market',
        'body' => 'body',
        'trim' => 'trim',
        'slug' => 'slug',
        'generation' => 'generation',
        'stud_holes' => 'stud_holes',
        'pcd' => 'pcd',
        'centre_bore' => 'centre_bore',
        'lock_type' => 'lock_type',
        'lock_text' => 'lock_text',
        'bolt_pattern' => 'bolt_pattern',
        'power' => 'power',
        'engine_type' => 'engine_type',
        'engine_code' => 'engine_code',
        'fuel' => 'fuel',
        'wheels' => 'wheels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'market' => 'setMarket',
        'body' => 'setBody',
        'trim' => 'setTrim',
        'slug' => 'setSlug',
        'generation' => 'setGeneration',
        'stud_holes' => 'setStudHoles',
        'pcd' => 'setPcd',
        'centre_bore' => 'setCentreBore',
        'lock_type' => 'setLockType',
        'lock_text' => 'setLockText',
        'bolt_pattern' => 'setBoltPattern',
        'power' => 'setPower',
        'engine_type' => 'setEngineType',
        'engine_code' => 'setEngineCode',
        'fuel' => 'setFuel',
        'wheels' => 'setWheels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'market' => 'getMarket',
        'body' => 'getBody',
        'trim' => 'getTrim',
        'slug' => 'getSlug',
        'generation' => 'getGeneration',
        'stud_holes' => 'getStudHoles',
        'pcd' => 'getPcd',
        'centre_bore' => 'getCentreBore',
        'lock_type' => 'getLockType',
        'lock_text' => 'getLockText',
        'bolt_pattern' => 'getBoltPattern',
        'power' => 'getPower',
        'engine_type' => 'getEngineType',
        'engine_code' => 'getEngineCode',
        'fuel' => 'getFuel',
        'wheels' => 'getWheels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCK_TYPE_NUT = 'nut';
    const LOCK_TYPE_BOLT = 'bolt';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLockTypeAllowableValues()
    {
        return [
            self::LOCK_TYPE_NUT,
            self::LOCK_TYPE_BOLT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['market'] = isset($data['market']) ? $data['market'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['trim'] = isset($data['trim']) ? $data['trim'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['generation'] = isset($data['generation']) ? $data['generation'] : null;
        $this->container['stud_holes'] = isset($data['stud_holes']) ? $data['stud_holes'] : null;
        $this->container['pcd'] = isset($data['pcd']) ? $data['pcd'] : null;
        $this->container['centre_bore'] = isset($data['centre_bore']) ? $data['centre_bore'] : null;
        $this->container['lock_type'] = isset($data['lock_type']) ? $data['lock_type'] : null;
        $this->container['lock_text'] = isset($data['lock_text']) ? $data['lock_text'] : null;
        $this->container['bolt_pattern'] = isset($data['bolt_pattern']) ? $data['bolt_pattern'] : null;
        $this->container['power'] = isset($data['power']) ? $data['power'] : null;
        $this->container['engine_type'] = isset($data['engine_type']) ? $data['engine_type'] : null;
        $this->container['engine_code'] = isset($data['engine_code']) ? $data['engine_code'] : null;
        $this->container['fuel'] = isset($data['fuel']) ? $data['fuel'] : null;
        $this->container['wheels'] = isset($data['wheels']) ? $data['wheels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLockTypeAllowableValues();
        if (!is_null($this->container['lock_type']) && !in_array($this->container['lock_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lock_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getLockTypeAllowableValues();
        if (!is_null($this->container['lock_type']) && !in_array($this->container['lock_type'], $allowedValues, true)) {
            return false;
        }
        return true;
    }


    /**
     * Gets market
     *
     * @return \WsApiClient\Model\Market
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     *
     * @param \WsApiClient\Model\Market $market market
     *
     * @return $this
     */
    public function setMarket($market)
    {
        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body Body name. Used extensively for JDM market (e.g. `GG2W`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets trim
     *
     * @return string
     */
    public function getTrim()
    {
        return $this->container['trim'];
    }

    /**
     * Sets trim
     *
     * @param string $trim Trim name. It can be empty for models created for JDM market (e.g. `2.0`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setTrim($trim)
    {
        $this->container['trim'] = $trim;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Combined trim, body, and generation identifier. Non-unique through markets (e.g. `20-gg2w-iii-restyling`)
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets generation
     *
     * @return \WsApiClient\Model\Generation
     */
    public function getGeneration()
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     *
     * @param \WsApiClient\Model\Generation $generation generation
     *
     * @return $this
     */
    public function setGeneration($generation)
    {
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets stud_holes
     *
     * @return int
     */
    public function getStudHoles()
    {
        return $this->container['stud_holes'];
    }

    /**
     * Sets stud_holes
     *
     * @param int $stud_holes Number of stud holes (e.g. `5`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setStudHoles($stud_holes)
    {
        $this->container['stud_holes'] = $stud_holes;

        return $this;
    }

    /**
     * Gets pcd
     *
     * @return float
     */
    public function getPcd()
    {
        return $this->container['pcd'];
    }

    /**
     * Sets pcd
     *
     * @param float $pcd Pitch circle diameter, mm (e.g. `105`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setPcd($pcd)
    {
        $this->container['pcd'] = $pcd;

        return $this;
    }

    /**
     * Gets centre_bore
     *
     * @return float
     */
    public function getCentreBore()
    {
        return $this->container['centre_bore'];
    }

    /**
     * Sets centre_bore
     *
     * @param float $centre_bore Centre bore diameter, mm (e.g. `48.1`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setCentreBore($centre_bore)
    {
        $this->container['centre_bore'] = $centre_bore;

        return $this;
    }

    /**
     * Gets lock_type
     *
     * @return string
     */
    public function getLockType()
    {
        return $this->container['lock_type'];
    }

    /**
     * Sets lock_type
     *
     * @param string $lock_type lock_type
     *
     * @return $this
     */
    public function setLockType($lock_type)
    {
        $allowedValues = $this->getLockTypeAllowableValues();
        if (!is_null($lock_type) && !in_array($lock_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lock_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lock_type'] = $lock_type;

        return $this;
    }

    /**
     * Gets lock_text
     *
     * @return string
     */
    public function getLockText()
    {
        return $this->container['lock_text'];
    }

    /**
     * Sets lock_text
     *
     * @param string $lock_text Lock thread size (e.g. `M12 x 1.25`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setLockText($lock_text)
    {
        $this->container['lock_text'] = $lock_text;

        return $this;
    }

    /**
     * Gets bolt_pattern
     *
     * @return string
     */
    public function getBoltPattern()
    {
        return $this->container['bolt_pattern'];
    }

    /**
     * Sets bolt_pattern
     *
     * @param string $bolt_pattern Bolt pattern (e.g. `5x105`, can be __*`N/A`*__)
     *
     * @return $this
     */
    public function setBoltPattern($bolt_pattern)
    {
        $this->container['bolt_pattern'] = $bolt_pattern;

        return $this;
    }

    /**
     * Gets power
     *
     * @return \WsApiClient\Model\Power
     */
    public function getPower()
    {
        return $this->container['power'];
    }

    /**
     * Sets power
     *
     * @param \WsApiClient\Model\Power $power power
     *
     * @return $this
     */
    public function setPower($power)
    {
        $this->container['power'] = $power;

        return $this;
    }

    /**
     * Gets engine_type
     *
     * @return string
     */
    public function getEngineType()
    {
        return $this->container['engine_type'];
    }

    /**
     * Sets engine_type
     *
     * @param string $engine_type Engine type (e.g. `V8`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setEngineType($engine_type)
    {
        $this->container['engine_type'] = $engine_type;

        return $this;
    }

    /**
     * Gets engine_code
     *
     * @return string
     */
    public function getEngineCode()
    {
        return $this->container['engine_code'];
    }

    /**
     * Sets engine_code
     *
     * @param string $engine_code Engine code (e.g. `G3LA`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setEngineCode($engine_code)
    {
        $this->container['engine_code'] = $engine_code;

        return $this;
    }

    /**
     * Gets fuel
     *
     * @return string
     */
    public function getFuel()
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     *
     * @param string $fuel Fuel (e.g. `Petrol`, can be __*`null`*__)
     *
     * @return $this
     */
    public function setFuel($fuel)
    {
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets wheels
     *
     * @return \WsApiClient\Model\WheelPair[]
     */
    public function getWheels()
    {
        return $this->container['wheels'];
    }

    /**
     * Sets wheels
     *
     * @param \WsApiClient\Model\WheelPair[] $wheels wheels
     *
     * @return $this
     */
    public function setWheels($wheels)
    {
        $this->container['wheels'] = $wheels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


